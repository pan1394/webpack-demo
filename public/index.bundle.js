!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=502)}({502:function(e,t,n){"use strict";function r(e){console.log(e)}n.r(t);var o=function(){function e(){}return e.get=function(e){return null==this.mode&&(this.mode=this.DEV),this.mode==this.DEV?e.DEV:e.PROD},e.getBarChartURL=function(){return this.get(this.CONTEXT)+this.get(this.BARCHAR_URL)},e.mode="prod",e.DEV="dev",e.PROD="prod",e.CONTEXT_URL="http://localhost:10020/bizServices/",e.CONTEXT={DEV:"../../../dummy/",PROD:e.CONTEXT_URL},e.BARCHAR_URL={DEV:"data.json",PROD:""},e}(),i=function(){function e(e){this.greeting=e}return e.prototype.greet=function(){return"Hello, "+this.greeting},e}();r("Hello World"),function(e){console.warn(e)}("Hello World"),function(e){console.error(e)}("Hello World"),window.onload=function(){var e=new i("world");r(o.getBarChartURL()),r("ts -> Looks like we are in"+e.greet())}}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,